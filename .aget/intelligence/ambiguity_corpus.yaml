# Ambiguity Corpus - Learned from Experiment #1
# Source: Spotify Clone Trial (M1 Analysis)
# Created: 2025-09-29 by my-AGET-aget (coordinator)

version: "1.0"
source_experiments:
  - experiment: "my-SPEC-EXPERIMENT-aget"
    version: "2.2.0-beta"
    trial: "SPOTIFY_CLONE_TRIAL_2025-09-29"
    m1_ambiguity: 5.5%
    clarifications: 1
    total_capabilities: 18

# Known ambiguity patterns from Experiment #1
ambiguity_patterns:

  # Pattern 1: WHERE without location/format specification
  - id: "AMB-001"
    pattern_name: "WHERE_without_specification"
    ears_pattern: "optional"
    trigger_keywords: ["WHERE", "available", "enabled", "present"]

    description: >
      Optional (WHERE) capabilities that don't specify file locations,
      formats, or concrete access methods leave implementers guessing.

    evidence:
      capability_id: "CAP-009"
      statement: "WHERE Technical_Logs are available, the SYSTEM shall extract Technical_Logs"
      issue: "File names not specified (Identity.json, Inferences.json)"
      m1_impact: "Required clarification during implementation"

    detection_rules:
      - has_where_keyword: true
      - missing_file_specification: true
      - missing_format_specification: true
      - missing_location_specification: true

    suggested_clarifications:
      - "Specify file names or patterns (e.g., Identity.json)"
      - "Specify file locations (e.g., /data/logs/*.json)"
      - "Specify file formats (e.g., JSON, CSV)"
      - "Specify access method (e.g., filesystem, API endpoint)"

    example_good:
      statement: "WHERE Recipe_Images are available, the SYSTEM shall store Image_Files in /data/recipes/{id}/images/ as JPEG format"
      why_good: "Location (/data/recipes/{id}/images/) and format (JPEG) explicitly specified"

    example_bad:
      statement: "WHERE Recipe_Images are available, the SYSTEM shall store Image_Files"
      why_bad: "Missing location and format - implementer must guess"

  # Pattern 2: Implied data structures without definition
  - id: "AMB-002"
    pattern_name: "implied_data_structure"
    ears_pattern: "any"
    trigger_keywords: ["Composite", "Manifest", "Record", "Structure"]

    description: >
      Capabilities referencing composite data structures without defining
      their fields, format, or schema.

    evidence:
      capability_id: "CAP-014"
      statement: "System shall generate Composite_Keys"
      issue: "Composite_Keys format not defined (what fields? delimiter?)"
      m1_impact: "Would require clarification if implemented"

    detection_rules:
      - has_composite_noun: true
      - missing_structure_definition: true
      - not_in_vocabulary: false  # May be defined in vocabulary

    suggested_clarifications:
      - "Define structure in vocabulary: fields, types, constraints"
      - "Provide example: {artist}:{track}:{timestamp}"
      - "Specify serialization format: JSON object, delimited string, etc."

    example_good:
      vocabulary_entry: "Recipe_Composite_Key"
      definition: "Unique identifier: {category}:{name}:{version} (UTF-8 lowercase, colon-delimited)"
      example: "desserts:chocolate-cake:v2"

    example_bad:
      statement: "System shall use Recipe_Keys to identify recipes"
      vocabulary_entry: "Recipe_Keys"
      definition: "Unique identifier for recipe"
      why_bad: "Format unspecified - could be UUID, integer, composite string"

  # Pattern 3: Temporal logic without units/thresholds
  - id: "AMB-003"
    pattern_name: "temporal_without_units"
    ears_pattern: "conditional"
    trigger_keywords: ["WITHIN", "AFTER", "BEFORE", "DURING"]

    description: >
      Conditional (IF...THEN) capabilities with temporal logic that don't
      specify time units or exact thresholds.

    evidence:
      capability_id: "CAP-034"
      statement: "IF Single_Artist exceeds Thirty_Plays WITHIN Twenty_Four_Hours"
      issue: "Clear in this case (numbers in name), but pattern can be ambiguous"
      m1_impact: "Zero - well-specified"

    detection_rules:
      - has_temporal_keyword: true
      - missing_time_unit: true
      - vague_threshold: true

    suggested_clarifications:
      - "Specify time units explicitly (hours, minutes, seconds)"
      - "Define threshold values numerically"
      - "Clarify timezone handling (UTC, local, user preference)"

    example_good:
      statement: "IF Recipe_Views exceed 100 WITHIN 24 hours (UTC), THEN mark as Trending"
      why_good: "Threshold (100), duration (24 hours), timezone (UTC) all explicit"

    example_bad:
      statement: "IF Recipe is popular recently, THEN mark as Trending"
      why_bad: "'popular' undefined, 'recently' vague"

  # Pattern 4: Missing error handling specifications
  - id: "AMB-004"
    pattern_name: "missing_error_handling"
    ears_pattern: "any"
    trigger_keywords: ["shall parse", "shall extract", "shall process"]

    description: >
      Capabilities that process external data without specifying error
      handling for malformed, missing, or invalid inputs.

    evidence:
      note: "Not explicitly found in Spotify trial, but common pattern"
      preventive: true

    detection_rules:
      - processes_external_data: true
      - missing_error_specification: true
      - no_validation_rules: true

    suggested_clarifications:
      - "Specify behavior for malformed input"
      - "Define validation rules (required fields, formats)"
      - "Specify error logging/reporting requirements"

    example_good:
      statement: "WHEN parsing Recipe_File, the SYSTEM shall validate JSON schema and log errors to Error_Log if validation fails"
      why_good: "Error handling explicit (validate, log errors)"

    example_bad:
      statement: "WHEN parsing Recipe_File, the SYSTEM shall extract Recipe_Data"
      why_bad: "No mention of what happens if file is malformed"

# Success metrics
metrics:
  baseline_m1: 5.5%  # From Spotify trial (1 clarification / 18 caps)
  target_m1: 1.0%    # Goal: 3x improvement
  ambiguities_prevented_target: 50%  # Catch half of potential issues
  false_positive_tolerance: 20%  # Accept up to 20% unnecessary flags

# Usage instructions
usage:
  - "Load this corpus into ambiguity detector"
  - "During spec creation, scan each capability against detection rules"
  - "Flag potential ambiguities with suggested clarifications"
  - "Track: flags raised, human decisions (accept/reject/modify)"
  - "Validate: Run clone test, measure actual M1 ambiguity"